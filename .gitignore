#Write a function called best that take two arguments: the 2-character abbreviated name of a state and an
#outcome name. The function reads the outcome-of-care-measures.csv file and returns a character vector
#with the name of the hospital that has the best (i.e. lowest) 30-day mortality for the specified  outcome
#in that state. The hospital name is the name provided in the Hospital.Name variable. The outcomes can
#be one of \"heart attack", \"heart failure", or \"pneumonia". Hospitals that do not have data on a particular
#outcome should be excluded from the set of hospitals when deciding the rankings.
#Handling ties. If there is a tie for the best hospital for a given outcome, then the hospital names should
#be sorted in alphabetical order and the rst hospital in that set should be chosen (i.e. if hospitals \b", \c",
#and \f" are tied for best, then hospital \b" should be returned).
#The function should use the following template.

best <- function(state, outcome) {
  ## Read outcome data
  YYdata<-read.csv("outcome-of-care-measures.csv",colClasses = "character")
  YYdata[,11]<-as.numeric(YYdata[,11]) #[11] "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"
  YYdata[,17]<-as.numeric(YYdata[,17]) #[17] "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure" 
  YYdata[,23]<-as.numeric(YYdata[,23]) #[23] "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia" 
  
 # [1] "Provider.Number"                                                                      
 # [2] "Hospital.Name"                                                                        
 # [3] "Address.1"                                                                            
 # [4] "Address.2"                                                                            
 # [5] "Address.3"                                                                            
 # [6] "City"                                                                                 
 # [7] "State"                                                                                
 # [8] "ZIP.Code"                                                                             
 # [9] "County.Name"                                                                          
 # [10] "Phone.Number" 
  
  #[11] "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack"  
  #[17] "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure"  
  #[23] "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"  
  
 # [15] "Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack" 
 # [21] "Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure" 
 # [27] "Number.of.Patients...Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia"
 # "Not Available"  
  ## Check that state and outcome are valid
  
  #"TX", "heart failure"
  
  #"MD", "heart attack"
  
  #"MD", "pneumonia"
  
  ## Return hospital name in that state with lowest 30-day death
  
  ## rate
  
}

#The function should check the validity of its arguments. If an invalid state value is passed to best, the
#function should throw an error via the stop function with the exact message \invalid state". If an invalid
#outcome value is passed to best, the function should throw an error via the stop function with the exact
#message \invalid outcome".

YYdata[which(YYdata$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack==min(YYdata$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm=TRUE)),2]
# > [1] "NYU HOSPITALS CENTER"

range(YYdata$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = TRUE)
# > [1] 10.1 21.9
range(YYdata$Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,na.rm = FALSE)
# > [1] NA NA
